openapi: '3.1.0'
info:
  version: '3.0.0'
  title: 'Parallel Game Data API'
  description: Access Parallel TCG user game data
servers:
  - url: https://parallel.life/
security:
    - OAuth:
        - pgs_user
paths:
  /api/pgs-proxy/public/games:
    get:
      summary: This endpoint will return anonymized game results for completed games where at least one player has sharing settings enabled.
      parameters:
        - name: game_type
          description: The type of game to include in the results
          required: true
          in: query
          schema: 
            $ref: '#/components/schemas/GameType'
            type: string
            enum:
              - ranked
              - unranked
              - private
              - ai
            example: ranked
        - name: include_settings
          description: Flag to include the user data sharing settings in the response 
          required: true
          in: query
          schema: 
            type: boolean
            example: true
        - name: start_date
          description: defaults to the start of sharing period
          required: false
          in: query
          schema:
            type: string
            pattern: ^\d{4}-\d{2}-\d{2}$
            example: 2024-10-10
        - name: end_date
          description: defaults to the current time
          required: false
          in: query
          schema:
            type: string
            pattern: ^\d{4}-\d{2}-\d{2}$
            example: 2024-12-10
        - name: continuation_token
          description: When provided, it will act as a pagination tool. The continuation response object will return the continuation token as next token if there are more results in the initial query. when continuation token is not provided, this endpoint will use `start_date` and `end_date`.
          required: false
          in: query
          schema: 
            type: string
      responses:
        200: 
          description: The list of games shared by the authorized player
          content:
            application/json:
              schema:
                type: object
                properties:
                  games:
                    type: array
                    items:
                      $ref: '#/components/schemas/GameSummary'
                  settings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Settings'
                  continuation:
                    $ref: '#/components/schemas/Continuation'
  /api/pgs-proxy/cards/:
    get:
      summary: Get the specified card sets
      parameters:
        - name: include_nfts
          required: true
          description: If the parameter include_nfts is set to false, only apparition entries will be returned (this includes borderless image URLs). There are issues with token images, paragon passive abilities, and split cards.
          in: query
          schema:
            type: boolean
            default: true
        - name: expansions
          required: true
          in: query
          schema:
            $ref: '#/components/schemas/Expansions'
      responses:
        200:
          description: The cards available in the specified expansions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
  /api/pgs-proxy/player/{player_id}/publishing-settings:
    get:
      summary: This endpoint will return the player’s publishing settings for each game mode.
      description: Get the publishing settings for a given player
      parameters:
        - name: player_id
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: The publishing settings for a given player
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Settings'
  /api/pgs-proxy/player/public/{id_type}/{id}/account:
    get:
      summary: This endpoint returns high level account details of a user. This endpoint can be used to validate that a user has access to a particular Parallel account.
      parameters:
        - name: id_type
          description: Whether to query by username or player id
          in: path
          required: true
          schema:
            type: string
            enum:
              - username
              - player_id
        - name: id
          description: Player ID if `id_type` is `player_id` or username if `id_type` is `username`
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Note that both profile id and account id can be used interchangeably as `player_id` its recommended to use account uuid as its slightly more performant.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  profile_id: 
                    type: integer
                  account_uuid:
                    type: string
                  temporary_code:
                    type: string
                    description: The temporary code is something that only the user will have access to. You can get the code from parallel.life > profile > profile ID (under profile picture). Then hit the following endpoint to ensure that the entered code matches what’s returned here.
                  picture_url:
                    type: string
  /api/pgs-proxy/player/public/{id_type}/{id}/profile:
    get:
      summary: Returns Parallel TCG profile details of a user. Note that `primary_wallet` will be none if player has not opted to include `include_wallet` in their publishing settings.
      parameters:
        - name: id_type
          description: Whether to query by username or player id
          in: path
          required: true
          schema:
            type: string
            enum:
              - username
              - player_id
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The profile for the given player
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  rank:
                    type: integer
                    description: only for masters
                  rank_bracket:
                    type: string
                  avatar_url:
                    type: string
                  primary_wallet:
                    type: string
                    description: will be none if player has not opted to include `include_wallet` in their publishing settings
  /api/pgs-proxy/player/{player_id}/game/overview:
    get:
      summary: Each game will have to have at least one player consenting to data publishing. If the opponent has not consented to data sharing, their username is withheld.
      parameters:
        - name: player_id
          in: path
          required: true
          schema:
            type: string
        - name: game_type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/GameType"
        - name: from_date
          in: query
          description: Will be used along with `offset` when `continuation_token` is not provided.
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: Will be used along with `from_date` when `continuation_token` is not provided.
          required: false
          schema:
            type: integer
        - name: continuation_token
          in: query
          description: When provided, it will act as a pagination tool. The continuation response object will return the continuation_token as next_token if there are more results in the initial query.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Note that when continuation_token is not provided, this endpoint will use the other 2 parameters. When provided, it will act as a pagination tool. The continuation response object will return the continuation_token as next_token if there are more results in the initial query.
          content:
            application/json:
              schema:
                type: object
                properties:
                  games:
                    type: array
                    items: 
                      $ref: '#/components/schemas/GameSummary'
  /api/pgs-proxy/player/{player_id}/game/{match_id}/deck:
    get:
      summary: Even if both players have their deck contents shared, please do not share the opponent’s deck composition for active games.
      parameters:
        - name: player_id
          in: path
          required: true
          schema:
            type: string
        - name: match_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: This will only be available if the player has enabled deck code sharing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  parallel:
                    type: string
                    enum:
                      - augencore
                      - earthen
                      - kathari
                      - marcolian
                      - shroud
                  paragon:
                    $ref: "#/components/schemas/Card"
                  cards:
                    type: array
                    items: 
                      $ref: '#/components/schemas/Card'
  /api/pgs-proxy/player/{player_id}/game/{match_id}/events:
    get:
      parameters:
        - name: player_id
          in: path
          required: true
          schema:
            type: string
        - name: match_id
          in: path
          required: true
          schema:
            type: string
        - name: start_from_turn_number
          description: When `continuation_token` is not provided, this is used.
          in: query
          schema:
            type: integer
        - name: start_from_event_time
          description: When `continuation_token` is not provided, this is used.
          in: query
          schema:
            type: integer
        - name: start_from_event_sequence
          description: When `continuation_token` is not provided, this is used.
          in: query
          schema:
            type: integer
        - name: continuation_token
          description: When provided, it will act as a pagination tool. The continuation response object will return the continuation_token as next_token if there are more results in the initial query.
          in: query
          schema:
            type: string
      responses:
        200:
          description: The sequence of events for the indicated game.
          content:
            application/json:
              schema:
                type: object
                properties:
                  game_events:
                    type: array
                    items:
                      type: object
                      properties:
                        event_sequence:
                          type: integer
                        turn_number:
                          type: integer
                        event_time:
                          type: integer
                        event_context:
                          $ref: '#/components/schemas/EventAction'
                  continuation:
                    $ref: '#/components/schemas/Continuation'
components:
  schemas:
    Continuation:
      description: The next token for data pagination
      type: object
      required:
        - next_token
        - has_more
      properties:
        next_token:
          type: string
        has_more:
          type: boolean
    Settings:
      description: Player data sharing settings
      type: object
      properties:
        game_type:
          type: string
        publish_game_overview:
          type: boolean
          description: top-level indicator for if player has enabled sharing for this game type
        include_deck_content:
          type: boolean
          description: player has opted to share game decks for this game type
        include_game_stream:
          type: boolean
          description: player has opted to share game events for this game type
        include_wallet:
          type: boolean
          description: player has opted to share their primary wallet with their profile
    CardPlayActionType:
        type: string
        enum:
            - ActivateAbility
            - Bank
            - MutualAttack
            - PlayEffect
            - PlayFromPile
            - PlayRelic
            - PlayUnit
            - PlayUpgrade
            - UseAbility
            - PlaySplitCard
            - PlaySplitPiece
            - DefendMutualAttack
            - SelectOption
            - SelectCards
            - SelectGameComponents
            - RearrangeCards
            - SelectPile
    CardLocation:
        type: string
        enum:
            - None
            - DeckA
            - DeckB
            - TopDeckA
            - TopDeckB
            - RevealedTopDeckA
            - RevealedTopDeckB
            - BottomDeckA
            - BottomDeckB
            - HandA
            - HandB
            - WasteA
            - WasteB
            - SingularityA
            - SingularityB
            - BankA
            - BankB
            - RevealedBankA
            - RevealedBankB
            - RelicFieldA
            - RelicFieldB
            - UnitFieldA
            - UnitFieldB
            - AttachedUpgradeA
            - AttachedUpgradeB
            - PlacedUnderA
            - PlacedUnderB
            - ParagonSpotA
            - ParagonSpotB
    CardMovementType:
        type: string
        enum:
            - Played
            - Spawned
            - ControlChanged
            - CardDrawn
            - CardPicked
            - Banked
            - Banished
            - PutIntoLocation
    CauseOfDamage:
        type: string
        enum:
            - DueToCombat
            - ModifiedByAbility
            - SearchingTheWastes
            - StatModifier
            - EndOfGame
            - ModifiedByDecay
            - DirectAdjustment
            - PayingHealthCost
    CauseOfDestruction:
        type: string
        enum:
            - DestroyedInCombat
            - DestroyedAfterDamage
            - DestroyedByAbility
            - DestroyedByStatModificationChange
            - DestroyedBySearchingTheWastes
            - DestroyedBySystemForNoHp
            - DestroyedByDecay
    CardKeyword:
        type: string
        enum:
            - None
            - Aftermath
            - Armed
            - Assault
            - Attuned
            - BattleReady
            - Decay
            - Defender
            - Evasive
            - Muster
            - Pacifist
            - Retaliate
            - Salvage
            - Shielded
            - Overclock
            - Flourish
    Expansions:
      description: Available Card expansions
      type: array
      items:
        type: string
        enum: 
          - baseset
          - planetfall
          - aftermath
          - battlepass
        example:
          - baseset
          - planetfall
          - aftermath
          - battlepass
    GameType:
      description: The type of game requested or returned
      type: string
      enum:
        - ranked
        - unranked
        - private
        - ai
      example: ranked
    GameSummary:
      description: The summary of a given game
      type: object
      properties:
        match_id:
          type: string
        game_type:
          type: string
        game_start_time:
          type: string
        game_end_time:
          type: string
        player_one_id:
          type: integer
        player_two_id:
          type: integer
        completed:
          type: boolean
        player_one_deck_parallel:
          type: string
        player_two_deck_parallel:
          type: string
        player_one_deck_paragon:
          type: string
        player_two_deck_paragon:
          type: string
        winner_id:
          type: integer
    Card:
      description: Properties of a given card
      type: object
      properties:
        card_id: 
          type: integer
        basename: 
          type: string
        name: 
          type: string
        design_id: 
          type: string
        rarity: 
          type: string
        parallel: 
          type: string
        expansion:
          type:
            $ref: '#/components/schemas/Expansions'
        card_class:
          type: string
        type:
          type: string
        subtype:
          type: string
        health:
          type: integer
        attack:
          type: integer
        cost:
          type: integer
        states:
          type: array
          items:
            type: string
        image_url:
          type: string
        title:
          type: string
        description: 
          type: string
        function_text:
          type: string
        flavour_text: 
          type: string
        animation_url:
          type: string
        is_playable:
          type: boolean
    AvatarInstance:
      type: object
      properties:
        type:
          type: string
          enum:
            - Avatar
        current_health:
          type: integer
        control_side:
          type: string
    Trait:
      type: object
      properties:
        trait_name: 
          type: string
        card_design_id:
          type: string
    EventBase:
      type: object
      properties:
        event:
          type: string
          enum:
            - InitialHandDealt
            - Mulligan
            - TurnStart
            - TurnEnd
            - Play
            - AbilityPlayed
            - AssaultTriggered
            - Attack
            - UpgradeAddedOrRemoved
            - EffectCardPlayed
            - SearchTheWaste
            - CardMoved
            - AbilityShielded
            - Defend
            - DamageFromDecay
            - TargetHealed
            - DamageDealt
            - Salvage
            - DestroyCard
            - StatsModified
            - DeckShuffled
            - KeywordAddedOrRemoved
            - TokenCreated
            - CounterValueUpdated
            - EnergyChanged
            - CardTransformed
            - CopyCreated
        active_player:
          type: string
          enum:
            - player_one
            - player_two
    InitialHandDealt:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            player_one_id:
              type: string
            player_two_id:
              type: string
            player_one_cards:
              type: array
              items:
                $ref: '#/components/schemas/Card'
            player_two_cards:
              type: array
              items:
                $ref: '#/components/schemas/Card'
    Mulligan:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            side:
              type: string
              enum:
                - player_one
                - player_two
            rejected_card:
              $ref: '#/components/schemas/Card'
    TurnStart:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            new_turn_side:
              type: string
    TurnEnd:
      allOf:
        - $ref: "#/components/schemas/EventBase"
    Play:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          required:
            - action_type
            - played_card
            - energy_cost
            - targets
          properties:
            action_type:
              type:
                $ref: '#/components/schemas/CardPlayActionType'
            played_card:
              $ref: "#/components/schemas/Card"
            energy_cost: 
              type: integer
            targets:
              type: array
              items:
                OneOf:
                  - $ref: '#/components/schemas/Card'
                  - $ref: '#/components/schemas/AvatarInstance'
            ability:
              $ref: '#/components/schemas/Trait'
            unit_field_index:
              type: integer
            secondary_attack:
              type: boolean
    AbilityPlayed:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            ability_card:
              $ref: "#/components/schemas/Card"
            ability_name:
              type: string
            targets:
              type: array
              items:
                OneOf:
                  - $ref: "#/components/schemas/Card"
                  - $ref: "#/components/schemas/AvatarInstance"
    AssaultTriggered:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            assault_card:
                $ref: "#/components/schemas/Card"
    Attack:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            attack_card:
                $ref: "#/components/schemas/Card"
            target:
                OneOf:
                    - $ref: "#/components/schemas/Card"
                    - $ref: "#/components/schemas/AvatarInstance"
    UpgradeAddedOrRemoved:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            is_added:
                type: boolean
            target_card:
                $ref: "#/components/schemas/Card"
            upgrade_card:
                $ref: "#/components/schemas/Card"
    EffectCardPlayed:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            effect_card:
                $ref: "#/components/schemas/Card"
            targets:
                type: array
                items:
                    OneOf:
                        - $ref: "#/components/schemas/Card"
                        - $ref: "#/components/schemas/AvatarInstance"
    SearchTheWaste:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          required:
            - side
            - health_lost
            - card_drawn
          properties:
            side: 
                type: string
            health_lost:
                tpye: integer
            card_drawn:
                type: boolean
            responsible_trait:
                $ref: "#/components/schemas/Trait"
    CardMoved:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            moved_card:
                $ref: "#/components/schemas/Card"
            old_location:
                $ref: "#/components/schemas/CardLocation"
            new_location:
                $ref: "#/components/schemas/CardLocation"
            movement_type:
                $ref: "#/components/schemas/CardMovementType"
    AbilityShielded:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            ability_card:
                $ref: "#/components/schemas/Card"
            targets: 
                type: array
                items:
                    $ref: "#/components/schemas/Card"
    Defend:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            attack_card:
                $ref: "#/components/schemas/Card"
            defend_card:
                $ref: "#/components/schemas/Card"
            target:
                OneOf:
                    - $ref: "#/components/schemas/Card"
                    - $ref: "#/components/schemas/AvatarInstance"
    DamageFromDecay:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          required:
            - decayed_card
            - decayed_card_position
            - decay_damage
          properties:
            decayed_card: 
                $ref: "#/components/schemas/Card"
            decayed_card_position:
                type: integer
            left_neighbour_card:
                $ref: "#/components/schemas/Card"
            right_neighbour_card:
                $ref: "#/components/schemas/Card"
            decay_damage:
                type: integer
    TargetHealed:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            healing_source:
                $ref: "#/components/schemas/Card"
            healed_target:
                OneOf:
                    - $ref: "#/components/schemas/Card"
                    - $ref: "#/components/schemas/AvatarInstance"
            healed_amount:
                type: integer
    DamageDealt:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          required:
            - target
            - damage_amount
            - cause_of_damage
          properties:
            target:
                OneOf:
                    - $ref: "#/components/schemas/Card"
                    - $ref: "#/components/schemas/AvatarInstance"
            damage_amount:
                type: integer
            cause_of_damage:
                $ref: "#/components/schemas/CauseOfDamage"
            source_card:
                $ref: "#/components/schemas/Card"
            source_trait:
                $ref: "#/components/schemas/Trait"
    Salvage:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            wasted_card:
                $ref: "#/components/schemas/Card"
            target_card:
                $ref: "#/components/schemas/Card"
            upgrade_card:
                $ref: "#/components/schemas/Card"
    DestroyCard:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            destroyed_card:
                $ref: "#/components/schemas/Card"
            cause_of_destruction:
                $ref: "#/components/schemas/CauseOfDestruction"
            source_card:
                $ref: "#/components/schemas/Card"
            source_trait:
                $ref: "#/components/schemas/Trait"
    StatsModified:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            target:
                $ref: "#/components/schemas/Card"
            new_value:
                type: integer
            old_value:
                type: integer
            stats_source:
                $ref: "#/components/schemas/Trait"
            data_trait: 
                $ref: "#/components/schemas/Trait"
    DeckShuffled:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            side:
                type: string
    KeywordAddedOrRemoved:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            target:
                $ref: "#/components/schemas/Card"
            keyword:
                $ref: "#/components/schemas/CardKeyword"
            is_added:
                type: boolean
            new_trait_count:
                type: integer
    TokenCreated:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            token: 
                $ref: "#/components/schemas/Card"
    CounterValueUpdated:
      allOf:
        - $ref: "#/components/schemas/Card"
        - type: object
          properties:
            target:
                $ref: "#/components/schemas/Card"
            old_value: 
                type: integer
            new_value:
                type: integer
    EnergyChanged:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            side: 
                type: string
            old_value: 
                type: integer
            new_value:
                type: integer
    CardTransformed:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            new_card:
                $ref: "#/components/schemas/Card"
            old_card:
                $ref: "#/components/schemas/Card"
    CopyCreated:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          properties:
            source_card:
                $ref: "#/components/schemas/Card"
            created_card:
                $ref: "#/components/schemas/Card"
    EventAction:
      type: object
      # TODO: finish specifying the event actions
      required:
        - event
        - active_player
      properties:
        event:
          type: string
          enum:
            - InitialHandDealt
            - Mulligan
            - TurnStart
            - TurnEnd
            - Play
            - AbilityPlayed
            - AssaultTriggered
            - Attack
            - UpgradeAddedOrRemoved
            - EffectCardPlayed
            - SearchTheWaste
            - CardMoved
            - AbilityShielded
            - Defend
            - DamageFromDecay
            - TargetHealed
            - DamageDealt
            - Salvage
            - DestroyCard
            - StatsModified
            - DeckShuffled
            - KeywordAddedOrRemoved
            - TokenCreated
            - CounterValueUpdated
            - EnergyChanged
            - CardTransformed
            - CopyCreated
        active_player:
          type: string
          enum:
            - player_one
            - player_two
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
  securitySchemes:
    OAuth:
      type: oauth2
      flows:
        authorizationCode: 
          authorizationUrl: oauth2/authorize/?response_type=code&client_id={client_id}&redirect_uri={redirect_uri}&code_challenge={generated_code}&scope=pgs_user
          tokenUrl: oauth2/token/?grant_type=authorization_code&code={code}&client_id={client_id}&code_verifier={generated_code}&redirect_uri={redirect_uri}
          scopes: 
            pgs_user: default
